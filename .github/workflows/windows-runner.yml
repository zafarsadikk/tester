name: Setup Windows Runner with Python and RustDesk

on:
  workflow_dispatch:

jobs:
  setup-windows:
    runs-on: windows-latest
    steps:

      - name: Install Python 3.10
        run: |
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.10.11/python-3.10.11-amd64.exe" -OutFile "$env:TEMP\python-installer.exe"
          Start-Process -FilePath "$env:TEMP\python-installer.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
          python --version

      - name: Install and Configure RustDesk
        run: |
          $RustDeskUrl = "https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-windows_x64-portable.zip"
          $RustDeskZip = "$env:TEMP\rustdesk.zip"
          $RustDeskExtractPath = "$env:TEMP\rustdesk"

          # Download RustDesk
          Invoke-WebRequest -Uri $RustDeskUrl -OutFile $RustDeskZip

          # Extract the Zip File
          Expand-Archive -Path $RustDeskZip -DestinationPath $RustDeskExtractPath -Force

          # Run RustDesk in the background
          Start-Process -FilePath "$RustDeskExtractPath\rustdesk.exe"
        shell: pwsh

      - name: Fetch RustDesk ID
        run: |
          Start-Sleep -Seconds 10  # Give RustDesk time to generate the ID
          $RustDeskIDPath = "$env:APPDATA\RustDesk\id"
          if (Test-Path $RustDeskIDPath) {
            $RustDeskID = Get-Content $RustDeskIDPath
            Write-Output "üöÄ RustDesk ID: $RustDeskID"
          } else {
            Write-Output "‚ö†Ô∏è RustDesk ID not found. Check manually."
          }
        shell: pwsh

      - name: Keep Runner Alive for 60 Minutes
        run: Start-Sleep -Seconds 3600
        shell: pwsh
